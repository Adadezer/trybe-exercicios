# üöÄ Exerc√≠cio 3 Utilize o m√≥dulo random da linguagem Python para gerar um array com 100 n√∫meros. Cada um desses n√∫meros deve ser a m√©dia de n n√∫meros gerados aleatoriamente. Qual √© a ordem de complexidade de tempo e de espa√ßo deste programa?

import random


def randomAverages(n):
    list_of_averages = []

    for _ in range(100):
        soma = 0
        average = 0
        for _ in range(n): # repete o for n vezes
            #randrange gera numeros aletorios entre x e y (y n√£o incu√≠do)
            soma += random.randrange(1, n) #pego esses numeros, e somo um com o outro
        average = soma / n
        list_of_averages.append(average)
        # o calculo da m√©dia √© feito 100 vezes, e cada m√©dia √© guardada na lista
    return list_of_averages

print(randomAverages(10))

# Complexidade de tempo: O(n) - Linear => pois, o algoritmo demora x tempo para executar dependendo do n√∫mero de m√©dias que precisar calcular

# Complexidade de espa√ßo: O(1) - Constante => pois, independente do numero de m√©dias que precisar calcular, sempre vai ser gerado um array de 100 posi√ß√µes, ocupando esse espa√ßo na mem√≥ria 